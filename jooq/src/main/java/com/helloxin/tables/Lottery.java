/*
 * This file is generated by jOOQ.
 */
package com.helloxin.tables;


import com.helloxin.Indexes;
import com.helloxin.Keys;
import com.helloxin.Zootopia;
import com.helloxin.tables.records.LotteryRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lottery extends TableImpl<LotteryRecord> {

    private static final long serialVersionUID = 1993432229;

    /**
     * The reference instance of <code>zootopia.lottery</code>
     */
    public static final Lottery LOTTERY = new Lottery();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LotteryRecord> getRecordType() {
        return LotteryRecord.class;
    }

    /**
     * The column <code>zootopia.lottery.id</code>.
     */
    public final TableField<LotteryRecord, UInteger> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>zootopia.lottery.user_id</code>. 中奖人id
     */
    public final TableField<LotteryRecord, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "中奖人id");

    /**
     * The column <code>zootopia.lottery.user_name</code>. 中奖人名称
     */
    public final TableField<LotteryRecord, String> USER_NAME = createField(DSL.name("user_name"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "中奖人名称");

    /**
     * The column <code>zootopia.lottery.lottery_game</code>. 抽奖场次
     */
    public final TableField<LotteryRecord, String> LOTTERY_GAME = createField(DSL.name("lottery_game"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "抽奖场次");

    /**
     * The column <code>zootopia.lottery.date_create</code>.
     */
    public final TableField<LotteryRecord, Timestamp> DATE_CREATE = createField(DSL.name("date_create"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>zootopia.lottery.date_update</code>.
     */
    public final TableField<LotteryRecord, Timestamp> DATE_UPDATE = createField(DSL.name("date_update"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>zootopia.lottery</code> table reference
     */
    public Lottery() {
        this(DSL.name("lottery"), null);
    }

    /**
     * Create an aliased <code>zootopia.lottery</code> table reference
     */
    public Lottery(String alias) {
        this(DSL.name(alias), LOTTERY);
    }

    /**
     * Create an aliased <code>zootopia.lottery</code> table reference
     */
    public Lottery(Name alias) {
        this(alias, LOTTERY);
    }

    private Lottery(Name alias, Table<LotteryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Lottery(Name alias, Table<LotteryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Lottery(Table<O> child, ForeignKey<O, LotteryRecord> key) {
        super(child, key, LOTTERY);
    }

    @Override
    public Schema getSchema() {
        return Zootopia.ZOOTOPIA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LOTTERY_PRIMARY);
    }

    @Override
    public Identity<LotteryRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_LOTTERY;
    }

    @Override
    public UniqueKey<LotteryRecord> getPrimaryKey() {
        return Keys.KEY_LOTTERY_PRIMARY;
    }

    @Override
    public List<UniqueKey<LotteryRecord>> getKeys() {
        return Arrays.<UniqueKey<LotteryRecord>>asList(Keys.KEY_LOTTERY_PRIMARY);
    }

    @Override
    public Lottery as(String alias) {
        return new Lottery(DSL.name(alias), this);
    }

    @Override
    public Lottery as(Name alias) {
        return new Lottery(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lottery rename(String name) {
        return new Lottery(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lottery rename(Name name) {
        return new Lottery(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UInteger, String, String, String, Timestamp, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}

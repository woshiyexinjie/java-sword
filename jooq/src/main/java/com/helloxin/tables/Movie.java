/*
 * This file is generated by jOOQ.
 */
package com.helloxin.tables;


import com.helloxin.Indexes;
import com.helloxin.Keys;
import com.helloxin.Zootopia;
import com.helloxin.tables.records.MovieRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Movie extends TableImpl<MovieRecord> {

    private static final long serialVersionUID = 797258527;

    /**
     * The reference instance of <code>zootopia.movie</code>
     */
    public static final Movie MOVIE = new Movie();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MovieRecord> getRecordType() {
        return MovieRecord.class;
    }

    /**
     * The column <code>zootopia.movie.id</code>. 电影表主键
     */
    public final TableField<MovieRecord, UInteger> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "电影表主键");

    /**
     * The column <code>zootopia.movie.movie_name</code>. 电影名字
     */
    public final TableField<MovieRecord, String> MOVIE_NAME = createField(DSL.name("movie_name"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "电影名字");

    /**
     * The column <code>zootopia.movie.director</code>. 导演
     */
    public final TableField<MovieRecord, String> DIRECTOR = createField(DSL.name("director"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "导演");

    /**
     * The column <code>zootopia.movie.duration</code>. 时长
     */
    public final TableField<MovieRecord, String> DURATION = createField(DSL.name("duration"), org.jooq.impl.SQLDataType.VARCHAR(32), this, "时长");

    /**
     * The column <code>zootopia.movie.score</code>. 评分
     */
    public final TableField<MovieRecord, Double> SCORE = createField(DSL.name("score"), org.jooq.impl.SQLDataType.DOUBLE, this, "评分");

    /**
     * The column <code>zootopia.movie.date_release</code>. 发型时间
     */
    public final TableField<MovieRecord, String> DATE_RELEASE = createField(DSL.name("date_release"), org.jooq.impl.SQLDataType.VARCHAR(32), this, "发型时间");

    /**
     * The column <code>zootopia.movie.region</code>. 地区
     */
    public final TableField<MovieRecord, String> REGION = createField(DSL.name("region"), org.jooq.impl.SQLDataType.VARCHAR(32), this, "地区");

    /**
     * The column <code>zootopia.movie.actors</code>. 主演
     */
    public final TableField<MovieRecord, String> ACTORS = createField(DSL.name("actors"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "主演");

    /**
     * The column <code>zootopia.movie.category</code>. 分类
     */
    public final TableField<MovieRecord, String> CATEGORY = createField(DSL.name("category"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "分类");

    /**
     * The column <code>zootopia.movie.source</code>. 来源
     */
    public final TableField<MovieRecord, String> SOURCE = createField(DSL.name("source"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("豆瓣", org.jooq.impl.SQLDataType.VARCHAR)), this, "来源");

    /**
     * The column <code>zootopia.movie.douban_detail</code>. 豆瓣详情地址
     */
    public final TableField<MovieRecord, String> DOUBAN_DETAIL = createField(DSL.name("douban_detail"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "豆瓣详情地址");

    /**
     * The column <code>zootopia.movie.date_create</code>. 创建时间
     */
    public final TableField<MovieRecord, Timestamp> DATE_CREATE = createField(DSL.name("date_create"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>zootopia.movie.date_update</code>. 更新时间
     */
    public final TableField<MovieRecord, Timestamp> DATE_UPDATE = createField(DSL.name("date_update"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "更新时间");

    /**
     * The column <code>zootopia.movie.is_delete</code>. 是否删除 0-&gt;默认，1-&gt;软删除
     */
    public final TableField<MovieRecord, Boolean> IS_DELETE = createField(DSL.name("is_delete"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "是否删除 0->默认，1->软删除");

    /**
     * Create a <code>zootopia.movie</code> table reference
     */
    public Movie() {
        this(DSL.name("movie"), null);
    }

    /**
     * Create an aliased <code>zootopia.movie</code> table reference
     */
    public Movie(String alias) {
        this(DSL.name(alias), MOVIE);
    }

    /**
     * Create an aliased <code>zootopia.movie</code> table reference
     */
    public Movie(Name alias) {
        this(alias, MOVIE);
    }

    private Movie(Name alias, Table<MovieRecord> aliased) {
        this(alias, aliased, null);
    }

    private Movie(Name alias, Table<MovieRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Movie(Table<O> child, ForeignKey<O, MovieRecord> key) {
        super(child, key, MOVIE);
    }

    @Override
    public Schema getSchema() {
        return Zootopia.ZOOTOPIA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MOVIE_PRIMARY);
    }

    @Override
    public Identity<MovieRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_MOVIE;
    }

    @Override
    public UniqueKey<MovieRecord> getPrimaryKey() {
        return Keys.KEY_MOVIE_PRIMARY;
    }

    @Override
    public List<UniqueKey<MovieRecord>> getKeys() {
        return Arrays.<UniqueKey<MovieRecord>>asList(Keys.KEY_MOVIE_PRIMARY);
    }

    @Override
    public Movie as(String alias) {
        return new Movie(DSL.name(alias), this);
    }

    @Override
    public Movie as(Name alias) {
        return new Movie(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Movie rename(String name) {
        return new Movie(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Movie rename(Name name) {
        return new Movie(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<UInteger, String, String, String, Double, String, String, String, String, String, String, Timestamp, Timestamp, Boolean> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
